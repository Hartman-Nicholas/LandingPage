package se.kth.sda.legalAliens.user;

import org.hibernate.validator.constraints.Length;

import se.kth.sda.legalAliens.comments.Comment;
import se.kth.sda.legalAliens.groups.Group;
import se.kth.sda.legalAliens.posts.Post;

import java.util.List;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * this class implements the model for user objects and interactions with associated classes
 * <p>
 *  initialises the user fields, getters and setter
 *  designates entity relationships using hibernate annotation
 *  dictates table constraints
 * </p>
 *
 * @author Nicholas Hartman
 * @author Sujan Varma
 * @author Qinyu
 * @version 1.0
 *
 */

@Entity
@Table(name = "account")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    private String avatar;
    private String bio = "Sample information, a short description of where you are from, your interests, personality.";

    @Email(message = "Invalid email address! Please provide a valid email address")
    @NotEmpty(message = "Please provide an email address")
    @Column(name = "email", unique = true)
    private String email;

    @Length(min = 5, max = 100, message = "Password length must be between 5-100 characters")
    @Column(name = "password")
    private String password;

    @Length(min = 3, max = 100, message = "Name must be between 3-100 characters")
    @Column(name = "name", unique = true)
    private String name;

    @OneToMany(mappedBy = "userCommentOwner")
    private List<Comment> comments;

    @OneToMany(mappedBy = "postOwner")
    private List<Post> posts;

    @OneToMany(mappedBy = "groupOwner")
    private List<Group> groupsCreated;

    @ManyToMany(mappedBy = "members")
    private List<Group> groupsJoined;

    private Boolean firstLogIn = true;

    public User() {
    }

    /**
     *
     * This is the constructor to initiate the User Class
     *
     * @param email holds the user email information
     * @param password holds the user password information
     * @param name holds the user name information
     */
    public User(
            @Email(message = "Invalid email address! Please provide a valid email address") @NotEmpty(message = "Please provide an email address") String email,
            @Length(min = 5, max = 100, message = "Password length most be between 5-100 characters") String password,
            @Length(min = 3, max = 100, message = "Name must be between 3-100 characters") String name) {
        this.email = email;
        this.password = password;
        this.name = name;
    }

    /**
     *
     * This is the method to change the state of the fields for the User object
     *
     * @param updateUser is a user object that holds the states of the fields  that will replace the old states
     * @return the user object with the updated states.
     */
    public User setUpdateUser (User updateUser) {
        if (updateUser.getAvatar() == null) {
         updateUser.setAvatar(this.getAvatar());
        }
        if (updateUser.getBio() == null) {
            updateUser.setBio(this.getBio());
        }
        if (updateUser.getName()== null) {
            updateUser.setName(this.getName());
        }
        if (updateUser.getPassword()== null) {
            updateUser.setPassword(this.getPassword());
        }
        if (updateUser.getEmail() == null) {
            updateUser.setEmail(this.getEmail());
        }
        return updateUser;
    }

    //a getter for the User ID which is autogenerated.
    public Long getId() {
        return id;
    }

    // setter for the User ID
    public void setId(Long id) {
        this.id = id;
    }

    //getter for the User's email
    public String getEmail() {
        return email;
    }

    //setter for the User's email
    public void setEmail(String email) {
        this.email = email;
    }


    //
    @JsonIgnore
    @JsonProperty(value = "user_password")
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Post> getPosts() {
        return this.posts;
    }

    public void setPosts(List<Post> posts) {
        this.posts = posts;
    }

    public List<Comment> getComments() {
        return this.comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }

    public List<Group> getGroupsCreated() {
        return this.groupsCreated;
    }

    public void setGroupsCreated(List<Group> groupsCreated) {
        this.groupsCreated = groupsCreated;
    }

    public List<Group> getGroupsJoined() {
        return this.groupsJoined;
    }

    public void setGroupsJoined(List<Group> groupsJoined) {
        this.groupsJoined = groupsJoined;
    }

    public Boolean isFirstLogIn() {
        return this.firstLogIn;
    }

    public Boolean getFirstLogIn() {
        return this.firstLogIn;
    }

    public void setFirstLogIn(Boolean firstLogIn) {
        this.firstLogIn = firstLogIn;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public String getBio() {
        return bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }
}
